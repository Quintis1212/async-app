{"version":3,"sources":["reducer.js","Async/GetData.js","components/Modal.js","components/Gallery.js","pages/Container.js","App.js","serviceWorker.js","index.js"],"names":["store","createStore","state","action","type","data","console","log","getDataFromServer","axios","get","then","res","dispatch","catch","error","Modal","id","name","text","postHandler","i","length","alert","post","getData","setState","handleChangeName","event","key","target","split","value","className","onClick","this","props","closeModal","map","el","index","src","url","alt","comments","Object","keys","placeholder","onChange","e","nextProps","prevState","item","Component","Gallery","modalWindow","modalHandler","idForModal","window","scrollTo","closeModalHandler","dataArr","Container","connect","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5ffdc4f8.chunk.js","sourcesContent":["import { createStore } from 'redux'\r\n\r\n\r\n\r\n\r\n\r\nfunction appStore(state = [] ,action) {\r\n    switch(action.type){ \r\n        case 'GET-DATA':\r\n           state = action.data.data;\r\n           console.log(state)\r\n           return state;\r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\nconst store = createStore(appStore)\r\n\r\nexport default store","\r\nimport axios from 'axios';\r\nimport store from '../reducer'\r\n\r\n\r\nfunction getDataFromServer  ()  {\r\n    axios.get('https://train-39df7.firebaseio.com/data.json')\r\n    .then(res=> {\r\n        console.log(1)\r\n        store.dispatch({type:'GET-DATA',data:res})\r\n    })\r\n    .catch(function (error) {\r\n     console.log(error);\r\n   })\r\n};\r\n\r\n\r\n\r\n\r\nexport default getDataFromServer","import React, { Component } from 'react'\r\nimport axios from 'axios';\r\nimport getData from '../Async/GetData';\r\n\r\n class Modal extends Component {\r\n    state = {\r\n        data: [],\r\n        id:'',\r\n        name : '',\r\n        text: ''\r\n    }\r\n    static getDerivedStateFromProps(nextProps, prevState){\r\n\r\n        if (nextProps.data) { \r\n            return {data : nextProps.data , id:nextProps.item}\r\n        }\r\n        return prevState\r\n       \r\n    }\r\n\r\n\r\n    postHandler = (i) => {\r\n        console.log(this.state.name.length)\r\n        if (this.state.name.length === 0 || this.state.text.length === 0 ) {\r\n            alert(\"Please, fill in all the fields\")\r\n        } else { \r\n        let data = {name:this.state.name, text: this.state.text}\r\n        axios.post(`https://train-39df7.firebaseio.com/data/${i}/comments.json`,data)\r\n        .then(function () {\r\n            getData()\r\n          })\r\n        .catch(function (error) {\r\n        console.log(error);\r\n        })\r\n        this.setState({name:'',text:''})\r\n        }\r\n\r\n         }\r\n\r\n    handleChangeName=(event)=> {\r\n        let key =  event.target.id.split(\"-\");\r\n        this.setState({[key[0]]: event.target.value})\r\n\r\n      }\r\n    render() {\r\n        return (\r\n            <div  className=\"modal\">\r\n                \r\n                <div onClick={this.props.closeModal} className=\"modal-dubl\"></div>\r\n                \r\n                <div className=\"item-container\">\r\n                <button className=\"close-modal-button\" type=\"button\" onClick={this.props.closeModal}></button>\r\n                    {this.state.data.map((el,index )=> {\r\n                       return el.id === this.state.id ?  ( \r\n                            <div key = {el.id}>\r\n                            <img  src={el.url}  alt=\"alt-puppy\"  />\r\n                            <ul>\r\n                            {el.comments ? Object.keys(el.comments).map(key=> {\r\n\r\n                                return <li key={key}><h4>{el.comments[key].name}</h4><p>{el.comments[key].text}</p></li>\r\n                                        \r\n                            }) : null \r\n                            }\r\n                             </ul>\r\n                             <form>\r\n                    <input id=\"name-for-comment\"  type=\"text\"  placeholder=\"Your name\" value={this.state.name} onChange={(e)=>this.handleChangeName(e)}/>\r\n                    <input id=\"text-for-comment\" type=\"text\"  placeholder=\"Your message\" value={this.state.text} onChange={(e)=>this.handleChangeName(e)} />\r\n                    <button className=\"submit-button\" onClick={()=>this.postHandler(index)} type=\"button\">SEND COMMENT</button>\r\n                    </form>\r\n                            </div>\r\n\r\n                        ) : null ;\r\n                    })}\r\n\r\n                    \r\n                    \r\n                    </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default  Modal","import React, { Component } from 'react';\r\nimport Modal from './Modal'\r\n\r\nexport default class Gallery extends Component {\r\n    state = {\r\n        data:[],\r\n        modalWindow:false\r\n    }\r\n\r\n    static getDerivedStateFromProps(nextProps, prevState){\r\n            return  {data:nextProps.dataArr}\r\n     }\r\n\r\n    modalHandler=(id)=>{\r\n        // console.log(id)\r\n        this.setState({\r\n            idForModal : id,\r\n            modalWindow:true\r\n        })\r\n        console.log(this.state)\r\n        window.scrollTo(0, 0);\r\n     }\r\n\r\n    closeModalHandler=()=>{\r\n        this.setState({\r\n            modalWindow:false\r\n        })\r\n     }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <ul className=\"gallery-list\">\r\n               {this.state.data.map(el=>{\r\n                  return ( \r\n                    <li onClick={()=>this.modalHandler(el.id)} key={el.id}><img src={el.url} alt=\"puppy\" /></li>\r\n                  ) \r\n               })}\r\n                {this.state.modalWindow ?<Modal item={this.state.idForModal} data={this.state.data} closeModal={this.closeModalHandler}/>  : null }\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Gallery from '../components/Gallery';\r\nimport {connect} from 'react-redux';\r\nimport getDataFromServer from '../Async/GetData'\r\n\r\n\r\n\r\n\r\n class Container extends Component {\r\n    state = {\r\n        data:[]\r\n    }\r\n\r\n\r\n    static getDerivedStateFromProps(nextProps, prevState){\r\n\r\n        if (nextProps.data) { \r\n            return {data : nextProps.data}\r\n        }\r\n        return prevState\r\n       \r\n    }\r\n    componentDidMount(){\r\n        \r\n        getDataFromServer()\r\n\r\n   }\r\n    render() {\r\n        return (\r\n                <>\r\n                {this.state.data < 1? (<div className=\"lds-ring\"><div></div><div></div><div></div><div></div></div>) : <Gallery dataArr={this.state.data}/>}\r\n                </>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default connect(state=>({\r\n    data:state\r\n}), \r\n\r\n)(Container)","import './App.css';\nimport React, { Component } from 'react';\nimport Container from './pages/Container'\n\n\n\n\n\n class App extends Component {\n\n\n  render() {\n    return  <Container/>\n    \n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport store from './reducer'\n\n\nReactDOM.render(  <Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}